// package handlers_test

// import (
// 	"bytes"
// 	"encoding/json"
// 	"net/http"
// 	"net/http/httptest"
// 	"testing"
// 	"time"

// 	"user-service/internal/domain/entities"
// 	"user-service/internal/interfaces/http/handlers"

// 	"github.com/gin-gonic/gin"
// 	"github.com/google/uuid"
// 	"github.com/stretchr/testify/assert"
// )

// func setupRouter() *gin.Engine {
// 	router := gin.Default()

// 	// Mocked UserService for testing
// 	mockUserService := &MockUserService{}
// 	userHandler := handlers.NewUserHandler(mockUserService)

// 	api := router.Group("/api/v1/users")
// 	{
// 		api.POST("/", userHandler.CreateUser)
// 		api.GET("/:id", userHandler.GetUser)
// 		api.PUT("/:id", userHandler.UpdateUser)
// 		api.DELETE("/:id", userHandler.DeleteUser)
// 	}

// 	return router
// }

// type MockUserService struct{}

// func (m *MockUserService) Create(user *entities.User) error {
// 	return nil
// }

// func (m *MockUserService) Get(id uuid.UUID) (*entities.User, error) {
// 	return &entities.User{
// 		ID:               id,
// 		Email:            "test@example.com",
// 		Phone:            "1234567890",
// 		Age:              30,
// 		Gender:           "Male",
// 		City:             "Test City",
// 		RegistrationDate: time.Now(),
// 		LastActivity:     time.Now(),
// 	}, nil
// }

// func (m *MockUserService) Update(user *entities.User) error {
// 	return nil
// }

// func (m *MockUserService) Delete(id uuid.UUID) error {
// 	return nil
// }

// func TestCreateUser(t *testing.T) {
// 	router := setupRouter()

// 	// Mock user data
// 	user := entities.User{
// 		Email:  "test@example.com",
// 		Phone:  "1234567890",
// 		Age:    30,
// 		Gender: "Male",
// 		City:   "Test City",
// 	}
// 	body, _ := json.Marshal(user)

// 	w := httptest.NewRecorder()
// 	req, _ := http.NewRequest("POST", "/api/v1/users/", bytes.NewBuffer(body))
// 	router.ServeHTTP(w, req)

// 	assert.Equal(t, http.StatusCreated, w.Code)
// }

// func TestGetUser(t *testing.T) {
// 	router := setupRouter()

// 	// Mock user ID
// 	userID := uuid.New()

// 	w := httptest.NewRecorder()
// 	req, _ := http.NewRequest("GET", "/api/v1/users/"+userID.String(), nil)
// 	router.ServeHTTP(w, req)

// 	assert.Equal(t, http.StatusOK, w.Code)
// 	// Additional assertions for response body can be added here
// }

// func TestUpdateUser(t *testing.T) {
// 	router := setupRouter()

// 	// Mock updated user data
// 	updatedUser := entities.User{
// 		Email:  "updated@example.com",
// 		Phone:  "0987654321",
// 		Age:    35,
// 		Gender: "Female",
// 		City:   "Updated City",
// 	}
// 	body, _ := json.Marshal(updatedUser)

// 	// Mock user ID
// 	userID := uuid.New()

// 	w := httptest.NewRecorder()
// 	req, _ := http.NewRequest("PUT", "/api/v1/users/"+userID.String(), bytes.NewBuffer(body))
// 	router.ServeHTTP(w, req)

// 	assert.Equal(t, http.StatusOK, w.Code)
// }

// func TestDeleteUser(t *testing.T) {
// 	router := setupRouter()

// 	// Mock user ID
// 	userID := uuid.New()

// 	w := httptest.NewRecorder()
// 	req, _ := http.NewRequest("DELETE", "/api/v1/users/"+userID.String(), nil)
// 	router.ServeHTTP(w, req)

// 	assert.Equal(t, http.StatusNoContent, w.Code)
// }
