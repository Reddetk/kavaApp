server:
  address: ":8080"
  port: "8080"
  read_timeout_seconds: 15
  write_timeout_seconds: 15
  idle_timeout_seconds: 60

logger:
  level: "INFO"
  format: "json"

database:
  dsn: "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable"
  max_open_conns: 25
  max_idle_conns: 5
  conn_max_lifetime_minutes: 30

kafka:
  brokers:
    - ${KAFKA_BROKERS}
  topic: ${KAFKA_TOPIC}
  group_id: ${KAFKA_GROUP_ID}
  connection:
    timeout: 10s
    retry:
      max_attempts: 5
      backoff: 1s
  consumer:
    fetch_min: 1
    fetch_default: 1MB
    fetch_max: 10MB
    max_wait_time: 500ms
    min_bytes: 1
    max_bytes: 10MB
  producer:
    acks: all
    timeout: 10s
    compression: snappy
    max_message_bytes: 1MB

data_preprocessing:
  data_cleaner:
    outlier_method: "IQR"
    missing_values_strategy: "median"
  metric_calculator:
    tbp:
      window_days: 30
    rfm:
      recency_weight: 0.5
      frequency_weight: 0.3
      monetary_weight: 0.2

segmentation:
  segmentation_batch_size: 500
  rfm_clustering:
    algorithm: "KMeans"
    clusters: 5
    max_iterations: 300
    random_seed: 42
  behavior_clustering:
    algorithm: "DBSCAN"
    eps: 0.5
    min_samples: 5

survival_analysis:
  survival_model:
    type: "CoxPH"
    parameters:
      regularization: 0.01
      max_iter: 1000

state_transition:
  transition_matrix:
    smoothing: 0.1
    threshold: 0.05

retention_prediction:
  retention_calculator:
    model: "LogisticRegression"
    threshold: 0.5

clv_updater:
  clv_calculator:
    discount_rate: 0.1
    forecast_period: 12

reporting_api:
  port: "9090"
  base_path: "/api/v1"